<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mightu Homepage</title>
    <link>http://blog.mightu.cc/</link>
    <description>Recent content on Mightu Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.mightu.cc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coursera Certificates</title>
      <link>http://blog.mightu.cc/courseracerts/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/courseracerts/</guid>
      <description>Got my role models&amp;rsquo; signatures.
&amp;ldquo;Neural Networks for Machine Learning by 多伦多大学 on Coursera. Certificate earned on September 15, 2017&amp;rdquo;.
&amp;ldquo;机器学习 by 斯坦福大学 on Coursera. Certificate earned on August 23, 2017&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Image Warping and Morphing</title>
      <link>http://blog.mightu.cc/imagewarping/</link>
      <pubDate>Mon, 15 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/imagewarping/</guid>
      <description>This is related to the 13th lecture of CSCE411 from tamu: http://faculty.cs.tamu.edu/jchai/csce441_spring13/lectures.html
Image warpings are basically mappings in spatial domain.
As introduced in the Selziski book, fundamental transformations include: similarity, affine, perspective transformations.
Beside, we can irregularly warp images using control points, therefore, we have to study optimal sampling/interpolation methods.
As an application, image morphing interpolate two images (after correspondences are found).</description>
    </item>
    
    <item>
      <title>Learning pdb</title>
      <link>http://blog.mightu.cc/learningpdb/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/learningpdb/</guid>
      <description>hard-coded breakpoints  pdb commands advanced topics comments:   I met a ```pdb``` tutorial on Github; here is the link: https://github.com/spiside/pdb-tutorial
This is the note I made while reading.

hard-coded breakpoints import pdb; pdb.set_trace()  
pdb commands  l(list) [first [,last]) s(tep) n(ext) b(reak) r(eturn) h(elp) cl(ear)  8 c(continue)

advanced topics  ! (bang), indicates the next line is Python command and not a ```pdb``` command Post Mortem: postmortem/ pm</description>
    </item>
    
    <item>
      <title>Simple Outlier Removal</title>
      <link>http://blog.mightu.cc/outlier-removal-1/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/outlier-removal-1/</guid>
      <description>Mean/Std Based  (Inter)Quartertile Based Related   This is a large topic, and I will write another post to introduce it systematically, and also give more methods which are at the same time more sophisticated.
The two methods in this post are both statistics-based.

Mean/Std Based def reject_outliers(data, m=2): return data[abs(data - np.mean(data)) &amp;lt; m * np.std(data)]  m usually ranges from 1.5 to 3.</description>
    </item>
    
    <item>
      <title>computing the OpenGL projection matrix from intrinsic camera parameters</title>
      <link>http://blog.mightu.cc/blog/glproj/</link>
      <pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/glproj/</guid>
      <description>  My Comments  Other Excellent Posts   Summary   The problem could be solved by checking the correspondences between GL matrices and cv intrinsics1 Or, in a two-stepped approach2  Excellent Posts  http://www.songho.ca/opengl/gl_projectionmatrix.html https://strawlab.org/2011/11/05/augmented-reality-with-OpenGL http://jamesgregson.blogspot.com/2011/11/matching-calibrated-cameras-with-opengl.html https://gist.github.com/astraw/1341472#file_projection_math.py   http://kgeorge.github.io/2014/03/08/calculating-opengl-perspective-matrix-from-opencv-intrinsic-matrix [return] http://ksimek.github.io/2013/06/03/calibrated_cameras_in_opengl [return]   </description>
    </item>
    
    <item>
      <title>3-layer architecture</title>
      <link>http://blog.mightu.cc/blog/architect/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/architect/</guid>
      <description>  The Driver Layer  The Logic Layer The User Layer   
The Driver Layer  possible back-ends wrappers  
The Logic Layer  complicated logic project oriented customization  
The User Layer  scripts utilities apps.  </description>
    </item>
    
    <item>
      <title>A New Site</title>
      <link>http://blog.mightu.cc/blog/a_new_site/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/a_new_site/</guid>
      <description>The old site is too hard to be continuously maintained. This is a new one with Hugo.</description>
    </item>
    
    <item>
      <title>gists</title>
      <link>http://blog.mightu.cc/blog/gist/</link>
      <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/gist/</guid>
      <description>publicly available at: https://gist.github.com/autosquid</description>
    </item>
    
    <item>
      <title>matplot</title>
      <link>http://blog.mightu.cc/blog/matplotlib/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/matplotlib/</guid>
      <description>Key Points:  multi-backends Mostly used parts(Artist Layer) Artist  attributes Types: Axis  Scripting Layer (pyplot)   I have to look up the manual every time I plot with matplotlib, which quite frustrating.
There are posts on the same topic both in English and Chinese1. This is a brief summarize of 1.
I&amp;rsquo;ll only list the key points, and only explain when necessary.

Key Points:</description>
    </item>
    
    <item>
      <title>Quine</title>
      <link>http://blog.mightu.cc/blog/quine/</link>
      <pubDate>Sun, 25 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/quine/</guid>
      <description>I realized to make a `quine`, you have to take the problem as a whole &amp;#x2013; the divide and conquer is not the panacea.</description>
    </item>
    
  </channel>
</rss>