<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mightu Homepage</title>
    <link>http://blog.mightu.cc/index.xml</link>
    <description>Recent content on Mightu Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.mightu.cc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Simply Outlier Removal</title>
      <link>http://blog.mightu.cc/outlier-removal-1/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/outlier-removal-1/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#org1bdd3f6&#34;&gt;Mean/Std Based&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#org68ed222&#34;&gt;(Inter)Quartertile Based&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a large topic, and I will write another post to introduce it systematically, and also give more methods which are at the same time more sophisticated.&lt;/p&gt;

&lt;p&gt;The two methods in this post are both statistics-based.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org1bdd3f6&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;mean-std-based&#34;&gt;Mean/Std Based&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def reject_outliers(data, m=2):
    return data[abs(data - np.mean(data)) &amp;lt; m * np.std(data)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;m usually ranges from 1.5 to 3.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org68ed222&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;inter-quartertile-based&#34;&gt;(Inter)Quartertile Based&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def reject_outliers(sr, iq_range=0.5):
    pcnt = (1 - iq_range) / 2
    qlow, median, qhigh = sr.dropna().quantile([pcnt, 0.50, 1-pcnt])
    iqr = qhigh - qlow
    return sr[ (sr - median).abs() &amp;lt;= iqr]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, note that (\delta \approx 1.4826 MAD), where MAD is for median absolute deviation, i.e., $MAD = median \left(\ \left|X&lt;sub&gt;i&lt;/sub&gt;- median (X)\right|\ \right),\,$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>computing the OpenGL projection matrix from intrinsic camera parameters</title>
      <link>http://blog.mightu.cc/blog/glproj/</link>
      <pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/glproj/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1&#34;&gt;My Comments&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sec-2&#34;&gt;Other Excellent Posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;summary-a-id-sec-1-a&#34;&gt;Summary &lt;a id=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;The problem could be solved by checking the correspondences between GL matrices and cv intrinsics&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Or, in a two-stepped approach&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;excellent-posts-a-id-sec-2-a&#34;&gt;Excellent Posts&lt;a id=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.songho.ca/opengl/gl_projectionmatrix.html&#34;&gt;http://www.songho.ca/opengl/gl_projectionmatrix.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://strawlab.org/2011/11/05/augmented-reality-with-OpenGL&#34;&gt;https://strawlab.org/2011/11/05/augmented-reality-with-OpenGL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jamesgregson.blogspot.com/2011/11/matching-calibrated-cameras-with-opengl.html&#34;&gt;http://jamesgregson.blogspot.com/2011/11/matching-calibrated-cameras-with-opengl.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/astraw/1341472#file_projection_math.py&#34;&gt;https://gist.github.com/astraw/1341472#file_projection_math.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://kgeorge.github.io/2014/03/08/calculating-opengl-perspective-matrix-from-opencv-intrinsic-matrix&#34;&gt;http://kgeorge.github.io/2014/03/08/calculating-opengl-perspective-matrix-from-opencv-intrinsic-matrix&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://ksimek.github.io/2013/06/03/calibrated_cameras_in_opengl&#34;&gt;http://ksimek.github.io/2013/06/03/calibrated_cameras_in_opengl&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>3-layer architecture</title>
      <link>http://blog.mightu.cc/blog/architect/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/architect/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#org4b26b5e&#34;&gt;The Driver Layer&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#org0bea3cf&#34;&gt;The Logic Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgbb8d110&#34;&gt;The User Layer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&#34;org4b26b5e&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-driver-layer&#34;&gt;The Driver Layer&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;possible back-ends&lt;/li&gt;
&lt;li&gt;wrappers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&#34;org0bea3cf&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-logic-layer&#34;&gt;The Logic Layer&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;complicated logic&lt;/li&gt;
&lt;li&gt;project oriented customization&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&#34;orgbb8d110&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;the-user-layer&#34;&gt;The User Layer&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;scripts&lt;/li&gt;
&lt;li&gt;utilities&lt;/li&gt;
&lt;li&gt;apps.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>A New Site</title>
      <link>http://blog.mightu.cc/blog/a_new_site/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/a_new_site/</guid>
      <description>&lt;p&gt;The old site is too hard to be continuously maintained. This is a new one with Hugo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gists</title>
      <link>http://blog.mightu.cc/blog/gist/</link>
      <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/gist/</guid>
      <description>&lt;p&gt;publicly available at: &lt;a href=&#34;https://gist.github.com/autosquid&#34;&gt;https://gist.github.com/autosquid&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matplot</title>
      <link>http://blog.mightu.cc/blog/matplotlib/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/matplotlib/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#org9359ebc&#34;&gt;Key Points:&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#org94efc6a&#34;&gt;multi-backends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org3d0611d&#34;&gt;Mostly used parts(Artist Layer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgaca1a45&#34;&gt;Artist&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#orgf3d15c5&#34;&gt;attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org5471d77&#34;&gt;Types:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orgab0cf79&#34;&gt;Axis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#org0214104&#34;&gt;Scripting Layer (pyplot)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have to look up the manual every time I plot with &lt;strong&gt;matplotlib&lt;/strong&gt;, which quite frustrating.&lt;/p&gt;

&lt;p&gt;There are posts on the same topic both in English and Chinese&lt;sup&gt;&lt;a id=&#34;fnr.1&#34; class=&#34;footref&#34; href=&#34;#fn.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This is a brief summarize of &lt;sup&gt;&lt;a id=&#34;fnr.1.100&#34; class=&#34;footref&#34; href=&#34;#fn.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll only list the key points, and only explain when necessary.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org9359ebc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;key-points&#34;&gt;Key Points:&lt;/h1&gt;

&lt;p&gt;&lt;a id=&#34;org94efc6a&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;multi-backends&#34;&gt;multi-backends&lt;/h2&gt;

&lt;p&gt;You want to visualize with Qt/GDK/Gtk+ etc. to generate ps, pdf, svg, png etc. These dirty works are done by the backends by abstracting of existing plotting tools into:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;FigureCanvas&lt;/code&gt;, which encapsulates the concept of a surface to draw onto (e.g. &amp;ldquo;the paper&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Renderer&lt;/code&gt;, which does the drawing (e.g. &amp;ldquo;the paintbrush&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Event&lt;/code&gt;, which handles user inputs such as keyboard and mouse events.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib.figure import Figure
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas

fig    = Figure()
canvas = FigureCanvas(fig)
ax     = fig.add_axes([0.1, 0.1, 0.8, 0.8])

line,  = ax.plot([0,1], [0,1])
ax.set_title(&amp;quot;a straight line (OO)&amp;quot;)
ax.set_xlabel(&amp;quot;x value&amp;quot;)
ax.set_ylabel(&amp;quot;y value&amp;quot;)

canvas.print_figure(&#39;demo.jpg&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In daily usage, only the &lt;code&gt;Canvas&lt;/code&gt; we have to care about occasionally. (e.g. the code above)&lt;/p&gt;

&lt;p&gt;Exceptionally, we may want to tune the &lt;code&gt;events&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import matplotlib.pyplot as plt

def on_press(event):
    if event.inaxes is None: return
    for line in event.inaxes.lines:
        if event.key==&#39;t&#39;:
            visible = line.get_visible()
            line.set_visible(not visible)
    event.inaxes.figure.canvas.draw()

fig, ax = plt.subplots(1)
fig.canvas.mpl_connect(&#39;key_press_event&#39;, on_press)

ax.plot(np.random.rand(2, 20))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&#34;org3d0611d&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mostly-used-parts-artist-layer&#34;&gt;Mostly used parts(Artist Layer)&lt;/h2&gt;

&lt;p&gt;The Artist hierarchy is the middle layer of the matplotlib stack, where the majority of the most important objects reside.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//www.aosabook.org/images/matplotlib/artists_tree.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgaca1a45&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;artist&#34;&gt;Artist&lt;/h2&gt;

&lt;p&gt;The Artist is the object that knows how to take the Renderer (the paintbrush) and put ink on the canvas.&lt;/p&gt;

&lt;p&gt;Everything in a &lt;code&gt;Figure&lt;/code&gt; is an Artist instance: it&amp;rsquo;s the base class (&lt;code&gt;matplotlib.artist.Artist&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;orgf3d15c5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;attributes&#34;&gt;attributes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;the transformation from the artist coordinate system to the canvas coordinate system&lt;/li&gt;
&lt;li&gt;the visibility, the clip box&lt;/li&gt;
&lt;li&gt;the label, and the interface to handle user interaction such as &amp;ldquo;picking&amp;rdquo;&lt;/li&gt;
&lt;li&gt;others&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&#34;org5471d77&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;types&#34;&gt;Types:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Primitive artists: Line2D, Rectangle, Circle, and Text.&lt;/li&gt;
&lt;li&gt;Composite artists: Axis, Tick, Axes, and Figure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id=&#34;orgab0cf79&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;axis&#34;&gt;Axis&lt;/h3&gt;

&lt;p&gt;Axis is the most important artist we can never avoid: it is where most of the &lt;code&gt;matplotlib&lt;/code&gt; API plotting methods are defined.&lt;/p&gt;

&lt;p&gt;It contains most of the graphical elements that make up the background of the plot—the ticks, the axis lines, the grid, the patch of color which is the plot background, and contains numerous helper methods that create primitive artists and add them to the Axes instance.&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;org0214104&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;scripting-layer-pyplot&#34;&gt;Scripting Layer (pyplot)&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;pyplot&lt;/code&gt; layer is for everyday purposes, particularly for interactive exploratory work by bench scientists who are not professional programmers.&lt;/p&gt;

&lt;p&gt;Here we need to know what is going on behind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When the pyplot module is loaded, it parses a local configuration file in which the user states, among many other things, their preference for a default backend.&lt;/li&gt;
&lt;li&gt;For a &lt;code&gt;plotting&lt;/code&gt; command, pyplot will check its internal data structures to see if there is a current Figure instance, and then re-use or create one accordingly.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;show&lt;/code&gt; command, will force the &lt;code&gt;Figure&lt;/code&gt; to render.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id=&#34;fn.1&#34; class=&#34;footnum&#34; href=&#34;#fnr.1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;a href=&#34;http://www.aosabook.org/en/matplotlib.html&#34;&gt;http://www.aosabook.org/en/matplotlib.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quine</title>
      <link>http://blog.mightu.cc/blog/quine/</link>
      <pubDate>Sun, 25 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mightu.cc/blog/quine/</guid>
      <description>&lt;p&gt;I realized to make a `quine`, you have to take the problem as a whole &amp;#x2013; the divide and conquer is not the panacea.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>